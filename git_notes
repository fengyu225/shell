git reset [-q] [<tree-ish>] [--] <paths>...
    This form resets the index entries for all <paths> to their state at
    <tree-ish>. (It does not affect the working tree or the current branch.)

    This means that git reset <paths> is the opposite of git add <paths>.

git checkout [-p|--patch] [<tree-ish>] [--] <pathspec>...
    When <paths> or --patch are given, git checkout does not switch branches. It
    updates the named paths in the working tree from the index file or from a named
    <tree-ish> (most often a commit). In this case, the -b and --track options are
    meaningless and giving either of them results in an error. The <tree-ish>
    argument can be used to specify a specific tree-ish (i.e. commit, tag or tree)
    to update the index for the given paths before updating the working tree.

    git checkout with <paths> or --patch is used to restore modified or deleted
    paths to their original contents from the index or replace paths with the
    contents from a named <tree-ish> (most often a commit-ish).

    The index may contain unmerged entries because of a previous failed merge. By
    default, if you try to check out such an entry from the index, the checkout
    operation will fail and nothing will be checked out. Using -f will ignore these
    unmerged entries. The contents from a specific side of the merge can be checked
    out of the index by using --ours or --theirs. With -m, changes made to the
    working tree file can be discarded to re-create the original conflicted merge
    result.

git reset file change only staging area
git checkout file change both staging and working area